# sway config
#

# Requirements for my custom config:
#

# alacritty
# amixer
# autotiling
# copyq
# input-remapper-git
# kbdd
# mako
# network-manager-applet
# playerctl 
# rofi
# shutter
# swaybg
# swaylock
# syncthingtray
# ttf-droid
# ttf-font-awesome-4
# waybar
#####################

# Mod key = Super key
set $mod Mod4

# Alt key
set $alt Mod1

# theme for rofi launcher
set $rofi_theme "Arc-Dark"

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:'Droid Sans' 12 
# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

input * {
    xkb_layout us,ua
    xkb_options grp:alt_shift_toggle
}

input type:touchpad {
    tap enabled
}

output HDMI-A-1 pos 0 0 res 2560x1440
output DP-3 pos 2560 0 res 2560x1440
output eDP-1 pos 0 0 res 3840x2160

# start a terminal
bindsym $mod+Return exec alacritty

# kill focused window
bindsym $alt+space kill

# start a program launcher
bindsym $mod+d exec rofi -show run -theme $rofi_theme -dpi $QT_FONT_DPI

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# sticky window toggle
bindsym $mod+Shift+s sticky toggle

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
# - not using this a lot
#bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child

# switch to workspace
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1; workspace 1
bindsym $mod+Shift+2 move container to workspace 2; workspace 2
bindsym $mod+Shift+3 move container to workspace 3; workspace 3
bindsym $mod+Shift+4 move container to workspace 4; workspace 4
bindsym $mod+Shift+5 move container to workspace 5; workspace 5
bindsym $mod+Shift+6 move container to workspace 6; workspace 6
bindsym $mod+Shift+7 move container to workspace 7; workspace 7
bindsym $mod+Shift+8 move container to workspace 8; workspace 8
bindsym $mod+Shift+9 move container to workspace 9; workspace 9
bindsym $mod+Shift+0 move container to workspace 10; workspace 10

bindsym $mod+Shift+r reload

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym j resize grow height 10 px or 10 ppt
        bindsym k resize shrink height 10 px or 10 ppt
        bindsym l resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 1 px or 1 ppt
        bindsym Down resize grow height 1 px or 1 ppt
        bindsym Up resize shrink height 1 px or 1 ppt
        bindsym Right resize grow width 1 px or 1 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"


# custom bindings

# Ctrl + Alt + l → lock 
bindsym $alt+Control+l exec --no-startup-id $Locker

# Move to the next/prev workspace on current monitor
bindsym $alt+Control+Right workspace next_on_output
bindsym $alt+Control+Left workspace prev_on_output 

# make a screenshot 
bindsym Print exec --no-startup-id shutter -s 

# ssh connect: Mod+tilda
bindsym $mod+grave exec rofi -show ssh -theme $rofi_theme -dpi $QT_FONT_DPI

# Pulse Audio controls
bindsym XF86AudioRaiseVolume exec --no-startup-id amixer -D pulse sset Master 10%+
bindsym XF86AudioLowerVolume exec --no-startup-id amixer -D pulse sset Master 10%-

# control Audio players
bindsym XF86AudioPlay exec --no-startup-id playerctl play-pause
bindsym XF86AudioPrev exec --no-startup-id playerctl previous
bindsym XF86AudioNext exec --no-startup-id playerctl next

# screen brightness
bindsym XF86MonBrightnessUp exec brightnessctl set 5%+
bindsym XF86MonBrightnessDown exec brightnessctl set 5%-

# move the currently focused window to the scratchpad
bindsym $mod+Shift+minus move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
bindsym $mod+minus scratchpad show

# calculator
bindsym XF86Calculator exec --no-startup-id gnome-calculator

# change audio output
bindsym XF86Tools exec --no-startup-id bash ~/toggle_headphones.sh
bindsym Control+F12 exec --no-startup-id bash ~/toggle_headphones.sh

# file browser
bindsym $alt+f exec --no-startup-id "~/lua/wm-keymap.lua f"
bindsym XF86Explorer exec --no-startup-id "~/lua/wm-keymap.lua f"

# super+/ open FZF script to open nvim
bindcode $mod+51 exec --no-startup-id alacritty -t 'fzf:nvim' -e bash ~/.config/nvim/find_and_edit.sh

# more apps (can be live changed in lua file)
bindsym $alt+t exec --no-startup-id "~/lua/wm-keymap.lua t"
bindsym $alt+i exec --no-startup-id "~/lua/wm-keymap.lua i"
bindsym $alt+b exec --no-startup-id "~/lua/wm-keymap.lua b"
bindsym $alt+v exec --no-startup-id "~/lua/wm-keymap.lua v"

bindsym Control+Page_Up exec --no-startup-id copyq show

# workspaces
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# Configure border style <normal|1pixel|pixel xx|none|pixel>
default_border pixel 1
default_floating_border pixel 1

# Hide borders
hide_edge_borders smart

set $Locker swaylock -c 000000
set $mode_system System (l) lock, (e) logout, (s) suspend, (r) reboot, (Shift+s) shutdown
mode "$mode_system" {
    bindsym l exec --no-startup-id $Locker, mode "default"
    bindsym e exec --no-startup-id i3-msg exit, mode "default"
    bindsym s exec --no-startup-id systemctl suspend, mode "default"
    #bindsym h exec --no-startup-id systemctl hibernate, mode "default"
    bindsym r exec --no-startup-id systemctl reboot, mode "default"
    bindsym Shift+s exec --no-startup-id systemctl poweroff -i, mode "default"  

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

bindsym $mod+Pause mode "$mode_system"
bindsym $mod+End mode "$mode_system"

bindsym $mod+$alt+Right move workspace to output right
bindsym $mod+$alt+Left move workspace to output left

# bind workspaces 
workspace $ws1 output HDMI-0
#workspace $ws2 output DP-0.8
workspace $ws2 output DP-1.1.8
#workspace $ws3 output DP-0.8
workspace $ws3 output DP-1.1.8 
workspace $ws4 output HDMI-0
workspace $ws5 output HDMI-0

# assign apps to workspaces
assign [class="firefox$"] → $ws1 
assign [class="^TelegramDesktop$"] → $ws2
assign [class="^Alacritty$" title="Terminal"] → $ws2
assign [class="^Alacritty$" title="nVim Editor Session"] → $ws2
assign [class="^jetbrains-phpstorm$"] → $ws3
assign [class="^Google-chrome$"] → $ws4
assign [class="^Chromium$"] → $ws4
assign [class="^Microsoft-edge$"] → $ws5
assign [class="^XXkb$"] → $ws9
assign [class="^KeePassXC$"] → $ws9

# per app rules
for_window [window_role="pop-up"] floating enable
for_window [window_role="task_dialog"] floating enable
for_window [class="Shutter"] floating enable, move position center
for_window [class="^copyq$"] floating enable, move position center
for_window [class="(?i)virtualbox"] floating enable
for_window [class="^KeePassXC$"] move position center 
for_window [class="^KeePassXC$" title="Browser Access Request"] floating enable, move window to workspace current
for_window [class="^Gnome-calculator$"] floating enable, border pixel 0
for_window [class="^Xreader$"] floating enable, border pixel 0
for_window [class="^jetbrains" title="^Diff Between '"] floating enable, border pixel 0
# for_window [class="^Telegram" title="Media viewer"] move window to output left
for_window [class="^Telegram" title="Save "] move window to workspace "2" 


for_window [class="^jetbrains-phpstorm$" title="License Expired"] kill 

# workaround @link https://bugzilla.mozilla.org/show_bug.cgi?id=686747
for_window [class="firefox"] resize grow height 1 px or 1 ppt

# Apps startup section

# xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
# screen before suspend. Use loginctl lock-session to lock your screen.
#exec --no-startup-id xss-lock --transfer-sleep-lock -- $Locker


# custom startup script (mound disks, run backup, start other apps)
exec --no-startup-id [ "$XDG_VTNR" -eq '7' ] && ~/startup.sh &
# desktop image
output * bg ~/Pictures/wallpapers/10-14-Night.jpg fill
# notifications daemon
exec --no-startup-id mako
# keyboard daemon to make per window layout 
#exec_always --no-startup-id [ "$XDG_VTNR" -eq '7' ] && i3-msg 'exec --no-startup-id "kbdd"'
# Enable numlock
#exec_always --no-startup-id numlockx on
# daemon to make per window layout using xkb
#exec --no-startup-id kbdd
# breaks for eyes
# exec --no-startup-id rsibreak --autostart
# syncthing tray
exec --no-startup-id syncthingtray --wait &
# clipboard manager
#exec --no-startup-id copyq
# load pre-saved layout and start browser
#exec --no-startup-id [ "$XDG_VTNR" -eq '7' ] && i3-msg "workspace $ws1; append_layout ~/.config/i3/workspace-1.json"
#exec --no-startup-id [ "$XDG_VTNR" -eq '7' ] && i3-msg "workspace $ws2; append_layout ~/.config/i3/workspace-2.json"
# run bash script in terminal and show result
exec --no-startup-id alacritty -t Terminal -e bash -c "~/PycharmProjects/desktop-utils/ssl.sh;zsh"
# vim in terminal with saved session
#exec --no-startup-id alacritty -t "nVim Editor Session" -e nvim -S "~/.config/nvim/configs-session.vim"
# polkit-kde-agent
exec --no-startup-id /usr/lib/polkit-kde-authentication-agent-1
# autotiling @link https://github.com/nwg-piotr/autotiling
exec_always --no-startup-id autotiling

# NetworkManager is the most popular way to manage wireless networks on Linux,
# and nm-applet is a desktop environment-independent system tray GUI for it.
#exec --no-startup-id nm-applet &

#exec --no-startup-id blueman-applet &

# input-remapper to remap custom mouse buttons and to emulate some keypresses
# requere: systemctl enable input-remapper
exec --no-startup-id input-remapper-control --command autoload --config-dir "~/.config/input-remapper/"
# edge browser
#exec --no-startup-id microsoft-edge-stable &
exec --no-startup-id firefox &
# hybrid GPU manager tray icon
#exec --no-startup-id optimus-manager-qt &
# touchpad 
#exec --no-startup-id libinput-gestures-setup start &
# audio manger tray icon
#exec --no-startup-id pasystray &
# fix JetBrains scale options for HDPI
#exec_always --no-startup-id bash ~/.config/JetBrains/fix-vmoptions.sh &
# screenshoter
#exec --no-startup-id shutter --min_at_startup &
# autorandr
#exec --no-startup-id autorandr -c 

bar {
swaybar_command waybar
}

